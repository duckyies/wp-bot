Absolutely! To make JSDoc display the command names properly and categorize them, you'll need to use the @module and @memberof tags within your JSDoc comments. Here's how to modify your files:
1. Add @module Tag to Each Command File:
At the beginning of each command file (e.g., wyr.ts, write.ts, etc.), add the following JSDoc comment:
/**
 * @module {command category name}
 */
Use code with caution.
JavaScript
Replace {command category name} with the actual category of the command (e.g., "General", "Games", "AI").
2. Add @memberof Tag to the run() Function:
Inside each command file, modify the JSDoc comment above the run() function to include the @memberof tag:
/**
 * {Command description}
 * @memberof module:{command category name}
 * @param {Client} client - The WhatsApp client instance.
 * @param {Message} msg - The message that triggered the command.
 * @param {string[]} args - An array of arguments for the command.
 */
Use code with caution.
JavaScript
Make sure to replace {Command description} with the actual description of the command and {command category name} with the appropriate category.
Example (wyr.ts):
/**
 * @module General 
 */

// ... other code ...

/**
 * Provides "Would You Rather" questions from a JSON database.
 * @memberof module:General
 * @param {Client} client - The WhatsApp client instance.
 * @param {Message} msg - The message that triggered the command.
 * @param {string[]} args - An array of arguments for the command.
 */
export async function run(client: Client, msg: Message, args: string[]) {
  // ... command logic ... 
}
Use code with caution.
JavaScript
3. (Optional) JSDoc Configuration:
If you're using a JSDoc generator to create documentation, you might need to adjust the configuration to ensure it recognizes the @module and @memberof tags correctly. Refer to the documentation for your specific JSDoc generator for details on configuration options.
Benefits of Using @module and @memberof:
Clear Organization: Commands will be grouped by category, making it easier to navigate and find relevant commands in the generated documentation.
Improved Readability: The @memberof tag clarifies which module (category) the command belongs to, providing better context for understanding the code.
Enhanced Navigation: JSDoc generators often use these tags to create hierarchical navigation structures within the documentation.
Additional Tips:
Consistency: Ensure you use the same category names consistently across all your command files.
Documentation Style: Consider adopting a consistent style guide for your JSDoc comments to improve readability and maintainability.
By following these steps, your JSDoc documentation will accurately reflect the command names and categorize them into their respective modules, making it easier to understand and navigate your bot's capabilities.
